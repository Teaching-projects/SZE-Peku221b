include "globals.mzn";

int: db = 15;
set of int: PEOPLE = 1..db;


enum NEVS = {DANI, PETI, LACI, ANDRAS, MARK, REKA, PETRA, ZOLI, ZSOFI ,JANI, BELA, GIZI, JOZSI, DALMA, ESZTER};
enum ELETKORS = {HUSZONOT, HUSZONEGY, HUSZONNYOLC, HARMINC, HARMINCKETTO, HUSZONKETTO, HARMINCHAROM, HUSZONKILENC, HUSZONHET, HARMINCEGY, HARMINCOT, HUSZONHAT, HARMINCNEGY, HUSZONNEGY, HUSZONHAROM};
enum KEDVENCSZINS = {ZOLD, SARGA, BARNA, KEK, NARANCSSARGA, LILA, PIROS, FEKETE, ROZSASZIN, FEHER, OKKER, MAGENTA, SZURKE, BIBOR, ARANY};
enum AUTOS = {AUDI, RENAULT, FERRARI, PEUGEOT, SUZUKI, SKODA, VOLVO, MERCEDES, HONDA, TOYOTA, PORSCHE, BMW, FORD, MAZDA, NISSAN};
enum KEDVENCALLATS = {OROSZLAN, TIGRIS, LO, KECSKE, KUTYA, RIGO, TEKNOS, ROKA, MACSKA, BEKA, SZAMAR, PILLANGO, FARKAS, TENGERIMALAC, DELFIN};
enum KEDVENCFOCICSAPATS = {JUVENTUS, BARCELONA, LIVERPOOL, CITY, INTER, LYON, UNITED, CHELSEA, BAYERN, REAL, MILAN, NAPOLI, ROMA, PSG, SPURS};
enum KEDVENCSPORTS = {JUDO, KUNGFU, FOCI, ROGBI, GOKART, ROPLABDA, AEROBIK, FUTSAL, FALMASZAS, FUTAS, LOVESZET, KARATE, USZAS, IJASZAT, KOSAR};
enum VAROSS = {SZEKESFEHERVAR, GYOR, NYIREGYHAZA, BUDAPEST, MISKOLC, VAC, SZOLNOK, MOR, VESZPREM, PECS, DEBRECEN, ESZTERGOM, SZEGED, KECSKEMET, SZOMBATHELY};
enum KERESETS = {K480K, K460K, K540K, K700K, K660K, K500K, K420K, K560K, K620K, K440K, K580K, K680K, K520K, K600K, K640K};
enum RUHAMARKAS = {PUMA, ARMANI, CALVINKLEIN, ADIDAS, LACOSTE, NIKE, OMBRE, FILA, REEBOK, VANS, GUCCI, EVERLAST, CONVERSE, MUSTANG, CASIO};
enum KEDVENCETELS = {PIZZA, LECSO, RANTOTTHUS, PACAL, SPAGETTI, KENYER, HUSLEVES, SULTKRUMPLI, FAGYI, PITE, SUTI, LEKVAR, FOZELEK, PALACSINTA, RAKOTTKRUMPLI};
enum KEDVENCITALS = {SOR, GYUMOLCSLE, KOLA, BOR, VIZ, KOKTEL, SZORP, GIN, KAKAO, PALINKA, WHISKY, TEA, VODKA, TEJ, MOJITO};
enum KEDVENCGYUMOLCSZOLDSEGS = {KORTE, PARADICSOM, KIWI, BANAN, DINNYE, ALMA, BARACK, RIBIZLI, SZOLO, DIO, PAPRIKA, KAPOSZTA, NARANCS, BROKKOLI, SZILVA};
enum KEDVENCISKOLAITANTARGYS = {TORI, KEMIA, TESI, SPANYOL, FIZIKA, INFORMATIKA, IRODALOM, BIOSZ, FILOZOFIA, ANGOL, NYELVTAN, OLASZ, MATEK, NEMET, OROSZ};
enum MUNKAS = {TANAR, KOMUVES, TUZOLTO, EPITESZ, RENDOR, ELADO, UGYVED, NYOMOZO, IRO, MERNOK, BIRO, IGAZGATO, KATONA, TECHNIKUS, PORTAS};


array[PEOPLE] of var NEVS: NEV;
array[PEOPLE] of var ELETKORS: ELETKOR;
array[PEOPLE] of var KEDVENCSZINS: KEDVENCSZIN;
array[PEOPLE] of var AUTOS: AUTO;
array[PEOPLE] of var KEDVENCALLATS: KEDVENCALLAT;
array[PEOPLE] of var KEDVENCFOCICSAPATS: KEDVENCFOCICSAPAT;
array[PEOPLE] of var KEDVENCSPORTS: KEDVENCSPORT;
array[PEOPLE] of var VAROSS: VAROS;
array[PEOPLE] of var KERESETS: KERESET;
array[PEOPLE] of var RUHAMARKAS: RUHAMARKA;
array[PEOPLE] of var KEDVENCETELS: KEDVENCETEL;
array[PEOPLE] of var KEDVENCITALS: KEDVENCITAL;
array[PEOPLE] of var KEDVENCGYUMOLCSZOLDSEGS: KEDVENCGYUMOLCSZOLDSEG;
array[PEOPLE] of var KEDVENCISKOLAITANTARGYS: KEDVENCISKOLAITANTARGY;
array[PEOPLE] of var MUNKAS: MUNKA;


constraint alldifferent(NEV);
constraint alldifferent(ELETKOR);
constraint alldifferent(KEDVENCSZIN);
constraint alldifferent(AUTO);
constraint alldifferent(KEDVENCALLAT);
constraint alldifferent(KEDVENCFOCICSAPAT);
constraint alldifferent(KEDVENCSPORT);
constraint alldifferent(VAROS);
constraint alldifferent(KERESET);
constraint alldifferent(RUHAMARKA);
constraint alldifferent(KEDVENCETEL);
constraint alldifferent(KEDVENCITAL);
constraint alldifferent(KEDVENCGYUMOLCSZOLDSEG);
constraint alldifferent(KEDVENCISKOLAITANTARGY);
constraint alldifferent(MUNKA);


constraint KEDVENCALLAT[1]=DELFIN xor KEDVENCALLAT[db]=DELFIN;
constraint KEDVENCFOCICSAPAT[1]=SPURS xor KEDVENCFOCICSAPAT[db]=SPURS;
constraint MUNKA[1]=TANAR xor MUNKA[db]=TANAR;
constraint NEV[1]=ESZTER xor NEV[db]=ESZTER;
constraint KERESET[1]=K480K xor KERESET[db]=K480K;
constraint KEDVENCGYUMOLCSZOLDSEG[1]=KORTE xor KEDVENCGYUMOLCSZOLDSEG[db]=KORTE;
constraint KEDVENCSPORT[1]=KOSAR xor KEDVENCSPORT[db]=KOSAR;
constraint KEDVENCALLAT[1]=OROSZLAN xor KEDVENCALLAT[db]=OROSZLAN;
constraint KEDVENCITAL[1]=MOJITO xor KEDVENCITAL[db]=MOJITO;
constraint KEDVENCISKOLAITANTARGY[1]=OROSZ xor KEDVENCISKOLAITANTARGY[db]=OROSZ;
constraint AUTO[1]=NISSAN xor AUTO[db]=NISSAN;
constraint RUHAMARKA[1]=CASIO xor RUHAMARKA[db]=CASIO;
constraint VAROS[1]=SZEKESFEHERVAR xor VAROS[db]=SZEKESFEHERVAR;


constraint forall(szek in PEOPLE)(AUTO[szek]=TOYOTA -> KEDVENCFOCICSAPAT[szek]=REAL);
constraint forall(szek in PEOPLE)(KEDVENCISKOLAITANTARGY[szek]=BIOSZ -> KERESET[szek]=K560K);
constraint forall(szek in PEOPLE)(NEV[szek]=ANDRAS -> KEDVENCETEL[szek]=PACAL);
constraint forall(szek in PEOPLE)(KEDVENCFOCICSAPAT[szek]=REAL -> KEDVENCSPORT[szek]=FUTAS);
constraint forall(szek in PEOPLE)(VAROS[szek]=GYOR -> KEDVENCGYUMOLCSZOLDSEG[szek]=PARADICSOM);
constraint forall(szek in PEOPLE)(KEDVENCALLAT[szek]=OROSZLAN -> KEDVENCISKOLAITANTARGY[szek]=TORI);
constraint forall(szek in PEOPLE)(KEDVENCALLAT[szek]=SZAMAR -> KEDVENCSZIN[szek]=OKKER);
constraint forall(szek in PEOPLE)(ELETKOR[szek]=HUSZONKETTO -> KEDVENCSPORT[szek]=ROPLABDA);
constraint forall(szek in PEOPLE)(KEDVENCSZIN[szek]=BARNA -> NEV[szek]=LACI);
constraint forall(szek in PEOPLE)(KEDVENCFOCICSAPAT[szek]=ROMA -> VAROS[szek]=SZEGED);
constraint forall(szek in PEOPLE)(RUHAMARKA[szek]=REEBOK -> KEDVENCETEL[szek]=FAGYI);
constraint forall(szek in PEOPLE)(AUTO[szek]=BMW -> KEDVENCISKOLAITANTARGY[szek]=OLASZ);
constraint forall(szek in PEOPLE)(NEV[szek]=DALMA -> KEDVENCITAL[szek]=TEJ);
constraint forall(szek in PEOPLE)(VAROS[szek]=GYOR -> KEDVENCALLAT[szek]=TIGRIS);
constraint forall(szek in PEOPLE)(KERESET[szek]=K560K -> KEDVENCSZIN[szek]=FEKETE);
constraint forall(szek in PEOPLE)(RUHAMARKA[szek]=CALVINKLEIN -> KEDVENCISKOLAITANTARGY[szek]=TESI);
constraint forall(szek in PEOPLE)(KEDVENCITAL[szek]=SOR -> ELETKOR[szek]=HUSZONOT);
constraint forall(szek in PEOPLE)(KEDVENCETEL[szek]=FAGYI -> KEDVENCFOCICSAPAT[szek]=BAYERN);
constraint forall(szek in PEOPLE)(ELETKOR[szek]=HUSZONOT -> RUHAMARKA[szek]=PUMA);
constraint forall(szek in PEOPLE)(KERESET[szek]=K500K -> KEDVENCISKOLAITANTARGY[szek]=INFORMATIKA);
constraint forall(szek in PEOPLE)(RUHAMARKA[szek]=GUCCI -> KEDVENCITAL[szek]=WHISKY);
constraint forall(szek in PEOPLE)(NEV[szek]=MARK -> KEDVENCFOCICSAPAT[szek]=INTER);
constraint forall(szek in PEOPLE)(AUTO[szek]=TOYOTA -> NEV[szek]=JANI);
constraint forall(szek in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[szek]=BARACK -> KEDVENCITAL[szek]=SZORP);
constraint forall(szek in PEOPLE)(KERESET[szek]=K560K -> MUNKA[szek]=NYOMOZO);
constraint forall(szek in PEOPLE)(MUNKA[szek]=IRO -> NEV[szek]=ZSOFI);
constraint forall(szek in PEOPLE)(KEDVENCISKOLAITANTARGY[szek]=OROSZ -> KERESET[szek]=K640K);
constraint forall(szek in PEOPLE)(ELETKOR[szek]=HUSZONHAROM -> KEDVENCGYUMOLCSZOLDSEG[szek]=SZILVA);
constraint forall(szek in PEOPLE)(RUHAMARKA[szek]=CONVERSE -> NEV[szek]=JOZSI);
constraint forall(szek in PEOPLE)(KEDVENCSZIN[szek]=FEHER -> KEDVENCETEL[szek]=PITE);
constraint forall(szek in PEOPLE)(KEDVENCSPORT[szek]=FUTAS -> KERESET[szek]=K440K);
constraint forall(szek in PEOPLE)(KEDVENCITAL[szek]=WHISKY -> KEDVENCISKOLAITANTARGY[szek]=NYELVTAN);
constraint forall(szek in PEOPLE)(KEDVENCITAL[szek]=TEJ -> AUTO[szek]=MAZDA);
constraint forall(szek in PEOPLE)(AUTO[szek]=FERRARI -> VAROS[szek]=NYIREGYHAZA);
constraint forall(szek in PEOPLE)(ELETKOR[szek]=HUSZONHET -> KEDVENCSPORT[szek]=FALMASZAS);
constraint forall(szek in PEOPLE)(KEDVENCITAL[szek]=TEJ -> KEDVENCGYUMOLCSZOLDSEG[szek]=BROKKOLI);
constraint forall(szek in PEOPLE)(AUTO[szek]=BMW -> KEDVENCETEL[szek]=LEKVAR);
constraint forall(szek in PEOPLE)(RUHAMARKA[szek]=FILA -> KEDVENCITAL[szek]=GIN);
constraint forall(szek in PEOPLE)(MUNKA[szek]=IRO -> KEDVENCALLAT[szek]=MACSKA);
constraint forall(szek in PEOPLE)(KEDVENCSZIN[szek]=SZURKE -> KEDVENCITAL[szek]=VODKA);
constraint forall(szek in PEOPLE)(KEDVENCSZIN[szek]=KEK -> AUTO[szek]=PEUGEOT);
constraint forall(szek in PEOPLE)(KEDVENCISKOLAITANTARGY[szek]=MATEK -> ELETKOR[szek]=HARMINCNEGY);
constraint forall(szek in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[szek]=NARANCS -> ELETKOR[szek]=HARMINCNEGY);
constraint forall(szek in PEOPLE)(KEDVENCFOCICSAPAT[szek]=PSG -> KEDVENCSZIN[szek]=BIBOR);
constraint forall(szek in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[szek]=DIO -> KEDVENCISKOLAITANTARGY[szek]=ANGOL);
constraint forall(szek in PEOPLE)(KEDVENCALLAT[szek]=TEKNOS -> AUTO[szek]=VOLVO);
constraint forall(szek in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[szek]=BANAN -> KEDVENCALLAT[szek]=KECSKE);
constraint forall(szek in PEOPLE)(KEDVENCETEL[szek]=LECSO ->KEDVENCSPORT [szek]=KUNGFU);
constraint forall(szek in PEOPLE)(ELETKOR[szek]=HARMINCEGY -> KEDVENCALLAT[szek]=BEKA);
constraint forall(szek in PEOPLE)(VAROS[szek]=MISKOLC -> KEDVENCETEL[szek]=SPAGETTI);
constraint forall(szek in PEOPLE)(MUNKA[szek]=BIRO -> AUTO[szek]=PORSCHE);
constraint forall(szek in PEOPLE)(KEDVENCETEL[szek]=HUSLEVES -> KEDVENCSPORT[szek]=AEROBIK);
constraint forall(szek in PEOPLE)(VAROS[szek]=SZEGED -> KERESET[szek]=K520K);
constraint forall(szek in PEOPLE)(KEDVENCFOCICSAPAT[szek]=BAYERN -> KERESET[szek]=K620K);
constraint forall(szek in PEOPLE)(KEDVENCSPORT[szek]=KUNGFU -> KEDVENCGYUMOLCSZOLDSEG[szek]=PARADICSOM);


constraint forall(x in PEOPLE)(AUTO[x]=TOYOTA -> count([KEDVENCSZIN[szek] | szek in 1..x-1], BARNA)=1) /\ forall(x in PEOPLE)(KEDVENCSZIN[x]=BARNA -> count([NEV[szek] | szek in x+1..db], REKA)=1);
constraint forall(x in PEOPLE)(KEDVENCISKOLAITANTARGY[x]=OROSZ -> count([KEDVENCFOCICSAPAT[szek] | szek in 1..x-1], BAYERN)=1) /\ forall(x in PEOPLE)(KEDVENCFOCICSAPAT[x]=BAYERN -> count([RUHAMARKA[szek] | szek in x+1..db], CONVERSE)=1);
constraint forall(x in PEOPLE)(KEDVENCSPORT[x]=KOSAR -> count([KEDVENCSZIN[szek] | szek in 1..x-1], OKKER)=1) /\ forall(x in PEOPLE)(KEDVENCSZIN[x]=OKKER -> count([VAROS[szek] | szek in x+1..db], KECSKEMET)=1);
constraint forall(x in PEOPLE)(KEDVENCSZIN[x]=FEKETE -> count([KEDVENCFOCICSAPAT[szek] | szek in 1..x-1], INTER)=1) /\ forall(x in PEOPLE)(KEDVENCFOCICSAPAT[x]=INTER -> count([KERESET[szek] | szek in x+1..db], K420K)=1);
constraint forall(x in PEOPLE)(KEDVENCITAL[x]=TEJ -> count([KEDVENCISKOLAITANTARGY[szek] | szek in 1..x-1], TESI)=1) /\ forall(x in PEOPLE)(KEDVENCISKOLAITANTARGY[x]=TESI -> count([NEV[szek] | szek in x+1..db], BELA)=1);
constraint forall(x in PEOPLE)(VAROS[x]=SZEGED -> count([NEV[szek] | szek in 1..x-1], JANI)=1) /\ forall(x in PEOPLE)(NEV[x]=JANI -> count([KEDVENCFOCICSAPAT[szek] | szek in x+1..db], MILAN)=1);
constraint forall(x in PEOPLE)(VAROS[x]=MISKOLC -> count([AUTO[szek] | szek in 1..x-1], FERRARI)=1) /\ forall(x in PEOPLE)(AUTO[x]=FERRARI -> count([ELETKOR[szek] | szek in x+1..db], HARMINC)=1);
constraint forall(x in PEOPLE)(AUTO[x]=NISSAN -> count([MUNKA[szek] | szek in 1..x-1], IGAZGATO)=1) /\ forall(x in PEOPLE)(MUNKA[x]=IGAZGATO -> count([ELETKOR[szek] | szek in x+1..db], HUSZONNEGY)=1);
constraint forall(x in PEOPLE)(KERESET[x]=K680K -> count([KEDVENCGYUMOLCSZOLDSEG[szek] | szek in 1..x-1], BARACK)=1) /\ forall(x in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[x]=BARACK -> count([KEDVENCISKOLAITANTARGY[szek] | szek in x+1..db], FILOZOFIA)=1);
constraint forall(x in PEOPLE)(KEDVENCITAL[x]=VIZ -> count([AUTO[szek] | szek in 1..x-1], AUDI)=1) /\ forall(x in PEOPLE)(AUTO[x]=AUDI -> count([MUNKA[szek] | szek in x+1..db], EPITESZ)=1);
constraint forall(x in PEOPLE)(VAROS[x]=BUDAPEST -> count([KERESET[szek] | szek in 1..x-1], K480K)=1) /\ forall(x in PEOPLE)(KERESET[x]=K480K -> count([KEDVENCISKOLAITANTARGY[szek] | szek in x+1..db], KEMIA)=1);
constraint forall(x in PEOPLE)(KEDVENCITAL[x]=KAKAO -> count([KEDVENCSZIN[szek] | szek in 1..x-1], BARNA)=1) /\ forall(x in PEOPLE)(KEDVENCSZIN[x]=BARNA -> count([KEDVENCISKOLAITANTARGY[szek] | szek in x+1..db], FIZIKA)=1);
constraint forall(x in PEOPLE)(AUTO[x]=BMW -> count([ELETKOR[szek] | szek in 1..x-1], HARMINCHAROM)=1) /\ forall(x in PEOPLE)(ELETKOR[x]=HARMINCHAROM -> count([KEDVENCSZIN[szek] | szek in x+1..db], ROZSASZIN)=1);
constraint forall(x in PEOPLE)(VAROS[x]=PECS -> count([KEDVENCALLAT[szek] | szek in 1..x-1], KUTYA)=1) /\ forall(x in PEOPLE)(KEDVENCALLAT[x]=KUTYA -> count([KEDVENCFOCICSAPAT[szek] | szek in x+1..db], UNITED)=1);
constraint forall(x in PEOPLE)(KEDVENCALLAT[x]=SZAMAR -> count([KEDVENCSZIN[szek] | szek in 1..x-1], FEKETE)=1) /\ forall(x in PEOPLE)(KEDVENCSZIN[x]=FEKETE -> count([AUTO[szek] | szek in x+1..db], HONDA)=1);
constraint forall(x in PEOPLE)(KEDVENCSPORT[x]=KOSAR -> count([ELETKOR[szek] | szek in 1..x-1], HARMINCEGY)=1) /\ forall(x in PEOPLE)(ELETKOR[x]=HARMINCEGY -> count([AUTO[szek] | szek in x+1..db], FORD)=1);
constraint forall(x in PEOPLE)(KEDVENCITAL[x]=WHISKY -> count([AUTO[szek] | szek in 1..x-1], VOLVO)=1) /\ forall(x in PEOPLE)(AUTO[x]=VOLVO -> count([KEDVENCALLAT[szek] | szek in x+1..db], ROKA)=1);
constraint forall(x in PEOPLE)(KEDVENCSPORT[x]=IJASZAT -> count([ELETKOR[szek] | szek in 1..x-1], HUSZONKILENC)=1) /\ forall(x in PEOPLE)(ELETKOR[x]=HUSZONKILENC -> count([KEDVENCALLAT[szek] | szek in x+1..db], PILLANGO)=1);
constraint forall(x in PEOPLE)(KEDVENCISKOLAITANTARGY[x]=OROSZ -> count([KERESET[szek] | szek in 1..x-1], K680K)=1) /\ forall(x in PEOPLE)(KERESET[x]=K680K -> count([KEDVENCETEL[szek] | szek in x+1..db], PALACSINTA)=1);
constraint forall(x in PEOPLE)(KEDVENCITAL[x]=BOR -> count([KEDVENCETEL[szek] | szek in 1..x-1], LECSO)=1) /\ forall(x in PEOPLE)(KEDVENCETEL[x]=LECSO -> count([KEDVENCGYUMOLCSZOLDSEG[szek] | szek in x+1..db], KIWI)=1);
constraint forall(x in PEOPLE)(RUHAMARKA[x]=MUSTANG -> count([MUNKA[szek] | szek in 1..x-1], MERNOK)=1) /\ forall(x in PEOPLE)(MUNKA[x]=MERNOK -> count([KEDVENCSPORT[szek] | szek in x+1..db], LOVESZET)=1);
constraint forall(x in PEOPLE)(KEDVENCALLAT[x]=KUTYA -> count([VAROS[szek] | szek in 1..x-1], GYOR)=1) /\ forall(x in PEOPLE)(VAROS[x]=GYOR -> count([KEDVENCETEL[szek] | szek in x+1..db], RANTOTTHUS)=1);
constraint forall(x in PEOPLE)(KEDVENCITAL[x]=KOKTEL -> count([KEDVENCALLAT[szek] | szek in 1..x-1], TIGRIS)=1) /\ forall(x in PEOPLE)(KEDVENCALLAT[x]=TIGRIS -> count([RUHAMARKA[szek] | szek in x+1..db], ADIDAS)=1);
constraint forall(x in PEOPLE)(ELETKOR[x]=HARMINCOT -> count([KEDVENCFOCICSAPAT[szek] | szek in 1..x-1], UNITED)=1) /\ forall(x in PEOPLE)(KEDVENCFOCICSAPAT[x]=UNITED -> count([VAROS[szek] | szek in x+1..db], VESZPREM)=1);
constraint forall(x in PEOPLE)(MUNKA[x]=KATONA -> count([KEDVENCETEL[szek] | szek in 1..x-1], HUSLEVES)=1) /\ forall(x in PEOPLE)(KEDVENCETEL[x]=HUSLEVES -> count([KERESET[szek] | szek in x+1..db], K580K)=1);
constraint forall(x in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[x]=BROKKOLI -> count([KEDVENCSPORT[szek] | szek in 1..x-1], FALMASZAS)=1) /\ forall(x in PEOPLE)(KEDVENCSPORT[x]=FALMASZAS -> count([KEDVENCETEL[szek] | szek in x+1..db], SUTI)=1);
constraint forall(x in PEOPLE)(KEDVENCSZIN[x]=NARANCSSARGA -> count([KEDVENCSZIN[szek] | szek in 1..x-1], KEK)=1) /\ forall(x in PEOPLE)(KEDVENCSZIN[x]=KEK -> count([KEDVENCSZIN[szek] | szek in x+1..db], ROZSASZIN)=1);
constraint forall(x in PEOPLE)(ELETKOR[x]=HARMINCEGY -> count([ELETKOR[szek] | szek in 1..x-1], HUSZONHET)=1) /\ forall(x in PEOPLE)(ELETKOR[x]=HUSZONHET -> count([ELETKOR[szek] | szek in x+1..db], HARMINCNEGY)=1);
constraint forall(x in PEOPLE)(KEDVENCETEL[x]=FOZELEK -> count([KEDVENCETEL[szek] | szek in 1..x-1], FAGYI)=1) /\ forall(x in PEOPLE)(KEDVENCETEL[x]=FAGYI -> count([KEDVENCETEL[szek] | szek in x+1..db], PALACSINTA)=1);


constraint ELETKOR[6]=HUSZONKETTO;
constraint AUTO[12]=BMW;
constraint RUHAMARKA[9]=REEBOK;
constraint KEDVENCITAL[5]=VIZ;
constraint VAROS[2]=GYOR;
constraint KEDVENCISKOLAITANTARGY[8]=BIOSZ;
constraint KERESET[5]=K660K;
constraint NEV[14]=DALMA;
constraint AUTO[10]=TOYOTA;
constraint MUNKA[3]=TUZOLTO;
constraint KEDVENCALLAT[1]=OROSZLAN;
constraint KEDVENCFOCICSAPAT[13]=ROMA;
constraint KEDVENCFOCICSAPAT[1]=JUVENTUS;
constraint NEV[7]=PETRA;
constraint AUTO[6]=SKODA;
constraint RUHAMARKA[14]=MUSTANG;
constraint MUNKA[15]=PORTAS;
constraint RUHAMARKA[3]=CALVINKLEIN;
constraint MUNKA[12]=IGAZGATO;
constraint VAROS[7]=SZOLNOK;
constraint KEDVENCGYUMOLCSZOLDSEG[8]=RIBIZLI;
constraint NEV[1]=DANI;
constraint KEDVENCFOCICSAPAT[8]=CHELSEA;
constraint KEDVENCALLAT[7]=TEKNOS;
constraint KEDVENCETEL[8]=SULTKRUMPLI;
constraint ELETKOR[3]=HUSZONNYOLC;
constraint ELETKOR[11]=HARMINCOT;
constraint ELETKOR[8]=HUSZONKILENC;
constraint KEDVENCITAL[9]=KAKAO;
constraint KEDVENCGYUMOLCSZOLDSEG[11]=PAPRIKA;
constraint MUNKA[7]=UGYVED;
constraint KEDVENCISKOLAITANTARGY[14]=NEMET;
constraint VAROS[4]=BUDAPEST;
constraint KEDVENCALLAT[6]=RIGO;
constraint KEDVENCSPORT[8]=FUTSAL;
constraint KEDVENCISKOLAITANTARGY[13]=MATEK;
constraint KEDVENCITAL[9]=KAKAO;
constraint KEDVENCITAL[4]=BOR;
constraint KEDVENCGYUMOLCSZOLDSEG[6]=ALMA;
constraint VAROS[10]=PECS;
constraint KERESET[12]=K680K;
constraint ELETKOR[12]=HUSZONHAT;
constraint KEDVENCETEL[7]=HUSLEVES;
constraint KEDVENCFOCICSAPAT[6]=LYON;
constraint MUNKA[6]=ELADO;
constraint AUTO[8]=MERCEDES;
constraint VAROS[6]=VAC;
constraint KEDVENCALLAT[5]=KUTYA;
constraint MUNKA[2]=KOMUVES;
constraint KEDVENCITAL[2]=GYUMOLCSLE;
constraint KEDVENCSZIN[7]=PIROS;
constraint KEDVENCSZIN[12]=MAGENTA;
constraint KEDVENCFOCICSAPAT[4]=CITY;
constraint MUNKA[13]=KATONA;
constraint ELETKOR[2]=HUSZONEGY;
constraint VAROS[5]=MISKOLC;
constraint KEDVENCSPORT[14]=IJASZAT;
constraint KEDVENCSPORT[5]=GOKART;
constraint KEDVENCISKOLAITANTARGY[5]=FIZIKA;
constraint KEDVENCSZIN[10]=FEHER;
constraint ELETKOR[4]=HARMINC;
constraint KEDVENCETEL[8]=SULTKRUMPLI;


constraint forall(x in PEOPLE)(AUTO[x]=BMW -> count([KEDVENCFOCICSAPAT[szek] | szek in x+1..db], SPURS)=1);
constraint forall(x in PEOPLE)(VAROS[x]=GYOR -> count([KEDVENCITAL[szek] | szek in 1..x-1], SOR)=1);
constraint forall(x in PEOPLE)(NEV[x]=PETRA -> count([RUHAMARKA[szek] | szek in x+1..db], FILA)=1);
constraint forall(x in PEOPLE)(KEDVENCSPORT[x]=ROGBI -> count([KEDVENCSZIN[szek] | szek in 1..x-1], SARGA)=1);
constraint forall(x in PEOPLE)(KERESET[x]=K660K -> count([RUHAMARKA[szek] | szek in x+1..db], NIKE)=1);
constraint forall(x in PEOPLE)(AUTO[x]=SKODA -> count([KEDVENCSZIN[szek] | szek in 1..x-1], NARANCSSARGA)=1);
constraint forall(x in PEOPLE)(KEDVENCSZIN[x]=KEK -> count([NEV[szek] | szek in 1..x-1], PETI)=1);
constraint forall(x in PEOPLE)(KEDVENCFOCICSAPAT[x]=LIVERPOOL -> count([KEDVENCETEL[szek] | szek in 1..x-1], LECSO)=1);
constraint forall(x in PEOPLE)(KEDVENCISKOLAITANTARGY[x]=TESI -> count([AUTO[szek] | szek in 1..x-1], RENAULT)=1);
constraint forall(x in PEOPLE)(KEDVENCITAL[x]=KOKTEL -> count([ELETKOR[szek] | szek in x+1..db], HARMINCEGY)=1);
constraint forall(x in PEOPLE)(RUHAMARKA[x]=EVERLAST -> count([KEDVENCSPORT[szek] | szek in x+1..db], USZAS)=1);
constraint forall(x in PEOPLE)(ELETKOR[x]=HUSZONKETTO -> count([KEDVENCALLAT[szek] | szek in 1..x-1], LO)=1);
constraint forall(x in PEOPLE)(KEDVENCISKOLAITANTARGY[x]=MATEK -> count([MUNKA[szek] | szek in x+1..db], TECHNIKUS)=1);
constraint forall(x in PEOPLE)(KEDVENCFOCICSAPAT[x]=CITY -> count([KEDVENCSZIN[szek] | szek in x+1..db], LILA)=1);
constraint forall(x in PEOPLE)(RUHAMARKA[x]=NIKE -> count([AUTO[szek] | szek in 1..x-1], SUZUKI)=1);
constraint forall(x in PEOPLE)(KEDVENCSPORT[x]=FUTSAL -> count([MUNKA[szek] | szek in x+1..db], BIRO)=1);
constraint forall(x in PEOPLE)(VAROS[x]=SZOLNOK -> count([KEDVENCGYUMOLCSZOLDSEG[szek] | szek in x+1..db], NARANCS)=1);
constraint forall(x in PEOPLE)(KEDVENCSPORT[x]=ROGBI -> count([KERESET[szek] | szek in 1..x-1], K460K)=1);
constraint forall(x in PEOPLE)(KEDVENCSZIN[x]=SZURKE -> count([KEDVENCALLAT[szek] | szek in x+1..db], TENGERIMALAC)=1);
constraint forall(x in PEOPLE)(AUTO[x]=PEUGEOT -> count([KEDVENCFOCICSAPAT[szek] | szek in 1..x-1], BARCELONA)=1);
constraint forall(x in PEOPLE)(RUHAMARKA[x]=VANS -> count([KEDVENCITAL[szek] | szek in x+1..db], TEA)=1);
constraint forall(x in PEOPLE)(KEDVENCSPORT[x]=FOCI -> count([KEDVENCALLAT[szek] | szek in x+1..db], KUTYA)=1);


constraint forall(szek in 1..db-1)(NEV[szek]=DALMA -> ELETKOR[szek+1]=HUSZONHAROM);
constraint forall(szek in 1..db-1)(RUHAMARKA[szek]=REEBOK -> RUHAMARKA[szek+1]=VANS);
constraint forall(szek in 1..db-1)(KEDVENCGYUMOLCSZOLDSEG[szek]=BARACK -> KEDVENCISKOLAITANTARGY[szek+1]=BIOSZ);
constraint forall(szek in 2..db)(KERESET[szek]=K660K -> NEV[szek-1]=ANDRAS);
constraint forall(szek in 1..db-1)(KEDVENCSPORT[szek]=FUTAS -> KEDVENCALLAT[szek+1]=SZAMAR);
constraint forall(szek in 2..db)(NEV[szek]=ANDRAS -> KEDVENCSZIN[szek-1]=BARNA);
constraint forall(szek in 2..db)(ELETKOR[szek]=HUSZONKETTO -> NEV[szek-1]=MARK);
constraint forall(szek in 1..db-1)(KEDVENCSZIN[szek]=FEKETE -> MUNKA[szek+1]=IRO);
constraint forall(szek in 2..db)(NEV[szek]=PETRA -> KEDVENCETEL[szek-1]=KENYER);
constraint forall(szek in 2..db)(KERESET[szek]=K660K -> KEDVENCSPORT[szek-1]=ROGBI);
constraint forall(szek in 1..db-1)(VAROS[szek]=GYOR -> AUTO[szek+1]=FERRARI);
constraint forall(szek in 2..db)(KEDVENCALLAT[szek]=TIGRIS -> KEDVENCSPORT[szek-1]=JUDO);
constraint forall(szek in 2..db)(VAROS[szek]=SZEGED -> NEV[szek-1]=GIZI);
constraint forall(szek in 1..db-1)(NEV[szek]=PETRA -> NEV[szek+1]=ZOLI);
constraint forall(szek in 1..db-1)(RUHAMARKA[szek]=VANS -> RUHAMARKA[szek+1]=GUCCI);
constraint forall(szek in 2..db)(VAROS[szek]=SZEGED -> RUHAMARKA[szek-1]=EVERLAST);
constraint forall(szek in 2..db)(NEV[szek]=ANDRAS -> KEDVENCFOCICSAPAT[szek-1]=LIVERPOOL);
constraint forall(szek in 1..db-1)(KEDVENCISKOLAITANTARGY[szek]=OLASZ -> KEDVENCSZIN[szek+1]=SZURKE);
constraint forall(szek in 2..db)(KEDVENCGYUMOLCSZOLDSEG[szek]=BARACK -> KERESET[szek-1]=K500K);
constraint forall(szek in 1..db-1)(KEDVENCISKOLAITANTARGY[szek]=TESI -> KEDVENCGYUMOLCSZOLDSEG[szek+1]=BANAN);
constraint forall(szek in 1..db-1)(RUHAMARKA[szek]=MUSTANG -> VAROS[szek+1]=SZOMBATHELY);
constraint forall(szek in 2..db)(MUNKA[szek]=PORTAS -> KERESET[szek-1]=K600K);
constraint forall(szek in 1..db-1)(KEDVENCSZIN[szek]=OKKER -> VAROS[szek+1]=ESZTERGOM);
constraint forall(szek in 2..db)(KEDVENCALLAT[szek]=TIGRIS -> AUTO[szek-1]=AUDI);
constraint forall(szek in 1..db-1)(RUHAMARKA[szek]=REEBOK -> KEDVENCSZIN[szek+1]=FEHER);
constraint forall(szek in 2..db)(NEV[szek]=DALMA -> KEDVENCALLAT[szek-1]=FARKAS);
constraint forall(szek in 2..db)(NEV[szek]=GIZI -> VAROS[szek-1]=DEBRECEN);
constraint forall(szek in 2..db)(KEDVENCALLAT[szek]=TIGRIS -> KEDVENCSZIN[szek-1]=ZOLD);
constraint forall(szek in 1..db-1)(KEDVENCSZIN[szek]=OKKER -> KEDVENCFOCICSAPAT[szek+1]=NAPOLI);
constraint forall(szek in 1..db-1)(RUHAMARKA[szek]=MUSTANG -> KEDVENCETEL[szek+1]=RAKOTTKRUMPLI);
constraint forall(szek in 2..db)(KEDVENCFOCICSAPAT[szek]=BAYERN -> VAROS[szek-1]=MOR);
constraint forall(szek in 1..db-1)(KERESET[szek]=K500K -> RUHAMARKA[szek+1]=OMBRE);
constraint forall(szek in 2..db)(NEV[szek]=MARK -> KEDVENCSZIN[szek-1]=KEK);
constraint forall(szek in 2..db)(KEDVENCALLAT[szek]=SZAMAR -> KEDVENCGYUMOLCSZOLDSEG[szek-1]=DIO);
constraint forall(szek in 1..db-1)(KEDVENCSZIN[szek]=FEKETE -> ELETKOR[szek+1]=HUSZONHET);
constraint forall(szek in 2..db)(NEV[szek]=JOZSI -> KEDVENCGYUMOLCSZOLDSEG[szek-1]=KAPOSZTA);
constraint forall(szek in 2..db)(KEDVENCSZIN[szek]=SARGA -> KEDVENCETEL[szek-1]=PIZZA);
constraint forall(szek in 1..db-1)(AUTO[szek]=MAZDA -> KEDVENCSZIN[szek+1]=ARANY);
constraint forall(szek in 2..db)(KEDVENCSZIN[szek]=SZURKE -> KEDVENCSPORT[szek-1]=KARATE);
constraint forall(szek in 2..db)(KEDVENCETEL[szek]=KENYER -> MUNKA[szek-1]=RENDOR);
constraint forall(szek in 1..db-1)(KEDVENCFOCICSAPAT[szek]=CHELSEA -> KEDVENCGYUMOLCSZOLDSEG[szek+1]=SZOLO);
constraint forall(szek in 2..db)(RUHAMARKA[szek]=MUSTANG -> KEDVENCETEL[szek-1]=FOZELEK);
constraint forall(szek in 1..db-1)(KEDVENCALLAT[szek]=FARKAS -> KEDVENCFOCICSAPAT[szek+1]=PSG);
constraint forall(szek in 2..db)(VAROS[szek]=BUDAPEST -> KERESET[szek-1]=K540K);
constraint forall(szek in 1..db-1)(KEDVENCETEL[szek]=PIZZA -> RUHAMARKA[szek+1]=ARMANI);
constraint forall(szek in 2..db)(KERESET[szek]=K500K -> RUHAMARKA[szek-1]=LACOSTE);
constraint forall(szek in 2..db)(KEDVENCETEL[szek]=KENYER -> KEDVENCGYUMOLCSZOLDSEG[szek-1]=DINNYE);
constraint forall(szek in 1..db-1)(KEDVENCGYUMOLCSZOLDSEG[szek]=KIWI -> KERESET[szek+1]=K700K);
constraint forall(szek in 2..db)(VAROS[szek]=SZOLNOK -> KEDVENCITAL[szek-1]=KOKTEL);
constraint forall(szek in 2..db)(KEDVENCITAL[szek]=WHISKY -> MUNKA[szek-1]=MERNOK);
constraint forall(szek in 1..db-1)(MUNKA[szek]=TUZOLTO -> KEDVENCISKOLAITANTARGY[szek+1]=SPANYOL);
constraint forall(szek in 2..db)(NEV[szek]=ANDRAS -> KEDVENCITAL[szek-1]=KOLA);
constraint forall(szek in 2..db)(RUHAMARKA[szek]=GUCCI -> KEDVENCITAL[szek-1]=PALINKA);
constraint forall(szek in 2..db)(KEDVENCITAL[szek]=GIN -> KEDVENCISKOLAITANTARGY[szek-1]=IRODALOM);
constraint forall(szek in 2..db)(KEDVENCSZIN[szek]=FEKETE -> ELETKOR[szek-1]=HARMINCHAROM);
constraint forall(szek in 2..db)(KEDVENCISKOLAITANTARGY[szek]=IRODALOM -> KEDVENCSZIN[szek-1]=LILA);
constraint forall(szek in 1..db-1)(KEDVENCALLAT[szek]=TEKNOS -> ELETKOR[szek+1]=HUSZONKILENC);
constraint forall(szek in 2..db)(KEDVENCETEL[szek]=LEKVAR -> KEDVENCETEL[szek-1]=SUTI);
constraint forall(szek in 2..db)(NEV[szek]=REKA -> NEV[szek-1]=MARK);


solve satisfy;

int: width = -15;
output [format(width,show(NEV[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(ELETKOR[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCSZIN[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(AUTO[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCALLAT[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCFOCICSAPAT[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCSPORT[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(VAROS[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KERESET[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(RUHAMARKA[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCETEL[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCITAL[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCGYUMOLCSZOLDSEG[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCISKOLAITANTARGY[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(MUNKA[p])) ++ "\t" | p in PEOPLE]++["\n"];