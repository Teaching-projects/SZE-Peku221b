include "globals.mzn";

int: db = 15;
set of int: PEOPLE = 1..db;


enum NEVS = {DANI, PETI, LACI, ANDRAS, MARK, REKA, PETRA, ZOLI, ZSOFI ,JANI, BELA, GIZI, JOZSI, DALMA, ESZTER};
enum ELETKORS = {HUSZONOT, HUSZONEGY, HUSZONNYOLC, HARMINC, HARMINCKETTO, HUSZONKETTO, HARMINCHAROM, HUSZONKILENC, HUSZONHET, HARMINCEGY, HARMINCOT, HUSZONHAT, HARMINCNEGY, HUSZONNEGY, HUSZONHAROM};
enum KEDVENCSZINS = {ZOLD, SARGA, BARNA, KEK, NARANCSSARGA, LILA, PIROS, FEKETE, ROZSASZIN, FEHER, OKKER, MAGENTA, SZURKE, BIBOR, ARANY};
enum AUTOS = {AUDI, RENAULT, FERRARI, PEUGEOT, SUZUKI, SKODA, VOLVO, MERCEDES, HONDA, TOYOTA, PORSCHE, BMW, FORD, MAZDA, NISSAN};
enum KEDVENCALLATS = {OROSZLAN, TIGRIS, LO, KECSKE, KUTYA, RIGO, TEKNOS, ROKA, MACSKA, BEKA, SZAMAR, PILLANGO, FARKAS, TENGERIMALAC, DELFIN};
enum KEDVENCFOCICSAPATS = {JUVENTUS, BARCELONA, LIVERPOOL, CITY, INTER, LYON, UNITED, CHELSEA, BAYERN, REAL, MILAN, NAPOLI, ROMA, PSG, SPURS};
enum KEDVENCSPORTS = {JUDO, KUNGFU, FOCI, ROGBI, GOKART, ROPLABDA, AEROBIK, FUTSAL, FALMASZAS, FUTAS, LOVESZET, KARATE, USZAS, IJASZAT, KOSAR};
enum VAROSS = {SZEKESFEHERVAR, GYOR, NYIREGYHAZA, BUDAPEST, MISKOLC, VAC, SZOLNOK, MOR, VESZPREM, PECS, DEBRECEN, ESZTERGOM, SZEGED, KECSKEMET, SZOMBATHELY};
enum KERESETS = {K480K, K460K, K540K, K700K, K660K, K500K, K420K, K560K, K620K, K440K, K580K, K680K, K520K, K600K, K640K};
enum RUHAMARKAS = {PUMA, ARMANI, CALVINKLEIN, ADIDAS, LACOSTE, NIKE, OMBRE, FILA, REEBOK, VANS, GUCCI, EVERLAST, CONVERSE, MUSTANG, CASIO};
enum KEDVENCETELS = {PIZZA, LECSO, RANTOTTHUS, PACAL, SPAGETTI, KENYER, HUSLEVES, SULTKRUMPLI, FAGYI, PITE, SUTI, LEKVAR, FOZELEK, PALACSINTA, RAKOTTKRUMPLI};
enum KEDVENCITALS = {SOR, GYUMOLCSLE, KOLA, BOR, VIZ, KOKTEL, SZORP, GIN, KAKAO, PALINKA, WHISKY, TEA, VODKA, TEJ, MOJITO};
enum KEDVENCGYUMOLCSZOLDSEGS = {KORTE, PARADICSOM, KIWI, BANAN, DINNYE, ALMA, BARACK, RIBIZLI, SZOLO, DIO, PAPRIKA, KAPOSZTA, NARANCS, BROKKOLI, SZILVA};
enum KEDVENCISKOLAITANTARGYS = {TORI, KEMIA, TESI, SPANYOL, FIZIKA, INFORMATIKA, IRODALOM, BIOSZ, FILOZOFIA, ANGOL, NYELVTAN, OLASZ, MATEK, NEMET, OROSZ};
enum MUNKAS = {TANAR, KOMUVES, TUZOLTO, EPITESZ, RENDOR, ELADO, UGYVED, NYOMOZO, IRO, MERNOK, BIRO, IGAZGATO, KATONA, TECHNIKUS, PORTAS};


array[PEOPLE] of var NEVS: NEV;
array[PEOPLE] of var ELETKORS: ELETKOR;
array[PEOPLE] of var KEDVENCSZINS: KEDVENCSZIN;
array[PEOPLE] of var AUTOS: AUTO;
array[PEOPLE] of var KEDVENCALLATS: KEDVENCALLAT;
array[PEOPLE] of var KEDVENCFOCICSAPATS: KEDVENCFOCICSAPAT;
array[PEOPLE] of var KEDVENCSPORTS: KEDVENCSPORT;
array[PEOPLE] of var VAROSS: VAROS;
array[PEOPLE] of var KERESETS: KERESET;
array[PEOPLE] of var RUHAMARKAS: RUHAMARKA;
array[PEOPLE] of var KEDVENCETELS: KEDVENCETEL;
array[PEOPLE] of var KEDVENCITALS: KEDVENCITAL;
array[PEOPLE] of var KEDVENCGYUMOLCSZOLDSEGS: KEDVENCGYUMOLCSZOLDSEG;
array[PEOPLE] of var KEDVENCISKOLAITANTARGYS: KEDVENCISKOLAITANTARGY;
array[PEOPLE] of var MUNKAS: MUNKA;


constraint alldifferent(NEV);
constraint alldifferent(ELETKOR);
constraint alldifferent(KEDVENCSZIN);
constraint alldifferent(AUTO);
constraint alldifferent(KEDVENCALLAT);
constraint alldifferent(KEDVENCFOCICSAPAT);
constraint alldifferent(KEDVENCSPORT);
constraint alldifferent(VAROS);
constraint alldifferent(KERESET);
constraint alldifferent(RUHAMARKA);
constraint alldifferent(KEDVENCETEL);
constraint alldifferent(KEDVENCITAL);
constraint alldifferent(KEDVENCGYUMOLCSZOLDSEG);
constraint alldifferent(KEDVENCISKOLAITANTARGY);
constraint alldifferent(MUNKA);


constraint KEDVENCALLAT[1]=DELFIN xor KEDVENCALLAT[db]=DELFIN;
constraint KEDVENCFOCICSAPAT[1]=SPURS xor KEDVENCFOCICSAPAT[db]=SPURS;
constraint MUNKA[1]=TANAR xor MUNKA[db]=TANAR;
constraint NEV[1]=ESZTER xor NEV[db]=ESZTER;
constraint KERESET[1]=K480K xor KERESET[db]=K480K;
constraint KEDVENCGYUMOLCSZOLDSEG[1]=KORTE xor KEDVENCGYUMOLCSZOLDSEG[db]=KORTE;
constraint KEDVENCSPORT[1]=KOSAR xor KEDVENCSPORT[db]=KOSAR;
constraint KEDVENCALLAT[1]=OROSZLAN xor KEDVENCALLAT[db]=OROSZLAN;
constraint KEDVENCITAL[1]=MOJITO xor KEDVENCITAL[db]=MOJITO;
constraint KEDVENCISKOLAITANTARGY[1]=OROSZ xor KEDVENCISKOLAITANTARGY[db]=OROSZ;
constraint AUTO[1]=NISSAN xor AUTO[db]=NISSAN;
constraint RUHAMARKA[1]=CASIO xor RUHAMARKA[db]=CASIO;
constraint VAROS[1]=SZEKESFEHERVAR xor VAROS[db]=SZEKESFEHERVAR;


constraint forall(p in PEOPLE)(AUTO[p]=TOYOTA <-> KEDVENCFOCICSAPAT[p]=REAL);
constraint forall(p in PEOPLE)(KEDVENCISKOLAITANTARGY[p]=BIOSZ <-> KERESET[p]=K560K);
constraint forall(p in PEOPLE)(NEV[p]=ANDRAS <-> KEDVENCETEL[p]=PACAL);
constraint forall(p in PEOPLE)(KEDVENCFOCICSAPAT[p]=REAL <-> KEDVENCSPORT[p]=FUTAS);
constraint forall(p in PEOPLE)(VAROS[p]=GYOR <-> KEDVENCGYUMOLCSZOLDSEG[p]=PARADICSOM);
constraint forall(p in PEOPLE)(KEDVENCALLAT[p]=OROSZLAN <-> KEDVENCISKOLAITANTARGY[p]=TORI);
constraint forall(p in PEOPLE)(KEDVENCALLAT[p]=SZAMAR <-> KEDVENCSZIN[p]=OKKER);
constraint forall(p in PEOPLE)(ELETKOR[p]=HUSZONKETTO <-> KEDVENCSPORT[p]=ROPLABDA);
constraint forall(p in PEOPLE)(KEDVENCSZIN[p]=BARNA <-> NEV[p]=LACI);
constraint forall(p in PEOPLE)(KEDVENCFOCICSAPAT[p]=ROMA <-> VAROS[p]=SZEGED);
constraint forall(p in PEOPLE)(RUHAMARKA[p]=REEBOK <-> KEDVENCETEL[p]=FAGYI);
constraint forall(p in PEOPLE)(AUTO[p]=BMW <-> KEDVENCISKOLAITANTARGY[p]=OLASZ);
constraint forall(p in PEOPLE)(NEV[p]=DALMA <-> KEDVENCITAL[p]=TEJ);
constraint forall(p in PEOPLE)(VAROS[p]=GYOR <-> KEDVENCALLAT[p]=TIGRIS);
constraint forall(p in PEOPLE)(KERESET[p]=K560K <-> KEDVENCSZIN[p]=FEKETE);
constraint forall(p in PEOPLE)(RUHAMARKA[p]=CALVINKLEIN <-> KEDVENCISKOLAITANTARGY[p]=TESI);
constraint forall(p in PEOPLE)(KEDVENCITAL[p]=SOR <-> ELETKOR[p]=HUSZONOT);
constraint forall(p in PEOPLE)(KEDVENCETEL[p]=FAGYI <-> KEDVENCFOCICSAPAT[p]=BAYERN);
constraint forall(p in PEOPLE)(ELETKOR[p]=HUSZONOT <-> RUHAMARKA[p]=PUMA);
constraint forall(p in PEOPLE)(KERESET[p]=K500K <-> KEDVENCISKOLAITANTARGY[p]=INFORMATIKA);
constraint forall(p in PEOPLE)(RUHAMARKA[p]=GUCCI <-> KEDVENCITAL[p]=WHISKY);
constraint forall(p in PEOPLE)(NEV[p]=MARK <-> KEDVENCFOCICSAPAT[p]=INTER);
constraint forall(p in PEOPLE)(AUTO[p]=TOYOTA <-> NEV[p]=JANI);
constraint forall(p in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[p]=BARACK <-> KEDVENCITAL[p]=SZORP);
constraint forall(p in PEOPLE)(KERESET[p]=K560K <-> MUNKA[p]=NYOMOZO);
constraint forall(p in PEOPLE)(MUNKA[p]=IRO <-> NEV[p]=ZSOFI);
constraint forall(p in PEOPLE)(KEDVENCISKOLAITANTARGY[p]=OROSZ <-> KERESET[p]=K640K);
constraint forall(p in PEOPLE)(ELETKOR[p]=HUSZONHAROM <-> KEDVENCGYUMOLCSZOLDSEG[p]=SZILVA);
constraint forall(p in PEOPLE)(RUHAMARKA[p]=CONVERSE <-> NEV[p]=JOZSI);
constraint forall(p in PEOPLE)(KEDVENCSZIN[p]=FEHER <-> KEDVENCETEL[p]=PITE);
constraint forall(p in PEOPLE)(KEDVENCSPORT[p]=FUTAS <-> KERESET[p]=K440K);
constraint forall(p in PEOPLE)(KEDVENCITAL[p]=WHISKY <-> KEDVENCISKOLAITANTARGY[p]=NYELVTAN);
constraint forall(p in PEOPLE)(KEDVENCITAL[p]=TEJ <-> AUTO[p]=MAZDA);
constraint forall(p in PEOPLE)(AUTO[p]=FERRARI <-> VAROS[p]=NYIREGYHAZA);
constraint forall(p in PEOPLE)(ELETKOR[p]=HUSZONHET <-> KEDVENCSPORT[p]=FALMASZAS);
constraint forall(p in PEOPLE)(KEDVENCITAL[p]=TEJ <-> KEDVENCGYUMOLCSZOLDSEG[p]=BROKKOLI);
constraint forall(p in PEOPLE)(AUTO[p]=BMW <-> KEDVENCETEL[p]=LEKVAR);
constraint forall(p in PEOPLE)(RUHAMARKA[p]=FILA <-> KEDVENCITAL[p]=GIN);
constraint forall(p in PEOPLE)(MUNKA[p]=IRO <-> KEDVENCALLAT[p]=MACSKA);
constraint forall(p in PEOPLE)(KEDVENCSZIN[p]=SZURKE <-> KEDVENCITAL[p]=VODKA);
constraint forall(p in PEOPLE)(KEDVENCSZIN[p]=KEK <-> AUTO[p]=PEUGEOT);
constraint forall(p in PEOPLE)(KEDVENCISKOLAITANTARGY[p]=MATEK <-> ELETKOR[p]=HARMINCNEGY);
constraint forall(p in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[p]=NARANCS <-> ELETKOR[p]=HARMINCNEGY);
constraint forall(p in PEOPLE)(KEDVENCFOCICSAPAT[p]=PSG <-> KEDVENCSZIN[p]=BIBOR);
constraint forall(p in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[p]=DIO <-> KEDVENCISKOLAITANTARGY[p]=ANGOL);
constraint forall(p in PEOPLE)(KEDVENCALLAT[p]=TEKNOS <-> AUTO[p]=VOLVO);
constraint forall(p in PEOPLE)(KEDVENCGYUMOLCSZOLDSEG[p]=BANAN <-> KEDVENCALLAT[p]=KECSKE);
constraint forall(p in PEOPLE)(KEDVENCETEL[p]=LECSO <-> KEDVENCSPORT[p]=KUNGFU);
constraint forall(p in PEOPLE)(ELETKOR[p]=HARMINCEGY <-> KEDVENCALLAT[p]=BEKA);
constraint forall(p in PEOPLE)(VAROS[p]=MISKOLC <-> KEDVENCETEL[p]=SPAGETTI);
constraint forall(p in PEOPLE)(MUNKA[p]=BIRO <-> AUTO[p]=PORSCHE);
constraint forall(p in PEOPLE)(KEDVENCETEL[p]=HUSLEVES <-> KEDVENCSPORT[p]=AEROBIK);
constraint forall(p in PEOPLE)(VAROS[p]=SZEGED <-> KERESET[p]=K520K);
constraint forall(p in PEOPLE)(KEDVENCFOCICSAPAT[p]=BAYERN <-> KERESET[p]=K620K);
constraint forall(p in PEOPLE)(KEDVENCSPORT[p]=KUNGFU <-> KEDVENCGYUMOLCSZOLDSEG[p]=PARADICSOM);


constraint forall(a,b in PEOPLE where a<b)(not(AUTO[a]=TOYOTA /\ NEV[b]=REKA)) /\ forall(a,b in PEOPLE where a<b)(not(AUTO[a]=TOYOTA /\ KEDVENCSZIN[b]=BARNA));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCISKOLAITANTARGY[a]=OROSZ /\ RUHAMARKA[b]=CONVERSE)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCISKOLAITANTARGY[a]=OROSZ /\ KEDVENCFOCICSAPAT[b]=BAYERN));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=KOSAR /\ VAROS[b]=KECSKEMET)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=KOSAR /\ KEDVENCSZIN[b]=OKKER));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSZIN[a]=FEKETE /\ KERESET[b]=K420K)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCSZIN[a]=FEKETE /\ KEDVENCFOCICSAPAT[b]=INTER));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=TEJ /\ NEV[b]=BELA)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=TEJ /\ KEDVENCISKOLAITANTARGY[b]=TESI));
constraint forall(a,b in PEOPLE where a<b)(not(VAROS[a]=SZEGED /\ KEDVENCFOCICSAPAT[b]=MILAN)) /\ forall(a,b in PEOPLE where a<b)(not(VAROS[a]=SZEGED /\ NEV[b]=JANI));
constraint forall(a,b in PEOPLE where a<b)(not(VAROS[a]=MISKOLC /\ ELETKOR[b]=HARMINC)) /\ forall(a,b in PEOPLE where a<b)(not(VAROS[a]=MISKOLC /\ AUTO[b]=FERRARI));
constraint forall(a,b in PEOPLE where a<b)(not(AUTO[a]=NISSAN /\ ELETKOR[b]=HUSZONNEGY)) /\ forall(a,b in PEOPLE where a<b)(not(AUTO[a]=NISSAN /\ MUNKA[b]=IGAZGATO));
constraint forall(a,b in PEOPLE where a<b)(not(KERESET[a]=K680K /\ KEDVENCISKOLAITANTARGY[b]=FILOZOFIA)) /\ forall(a,b in PEOPLE where a<b)(not(KERESET[a]=K680K /\ KEDVENCGYUMOLCSZOLDSEG[b]=BARACK));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=VIZ /\ MUNKA[b]=EPITESZ)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=VIZ /\ AUTO[b]=AUDI));
constraint forall(a,b in PEOPLE where a<b)(not(VAROS[a]=BUDAPEST /\ KEDVENCISKOLAITANTARGY[b]=KEMIA)) /\ forall(a,b in PEOPLE where a<b)(not(VAROS[a]=BUDAPEST /\ KERESET[b]=K480K));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=KAKAO /\ KEDVENCISKOLAITANTARGY[b]=FIZIKA)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=KAKAO /\ KEDVENCSZIN[b]=BARNA));
constraint forall(a,b in PEOPLE where a<b)(not(AUTO[a]=BMW /\ KEDVENCSZIN[b]=ROZSASZIN)) /\ forall(a,b in PEOPLE where a<b)(not(AUTO[a]=BMW /\ ELETKOR[b]=HARMINCHAROM));
constraint forall(a,b in PEOPLE where a<b)(not(VAROS[a]=PECS /\ KEDVENCFOCICSAPAT[b]=UNITED)) /\ forall(a,b in PEOPLE where a<b)(not(VAROS[a]=PECS /\ KEDVENCALLAT[b]=KUTYA));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCALLAT[a]=SZAMAR /\ AUTO[b]=HONDA)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCALLAT[a]=SZAMAR /\ KEDVENCSZIN[b]=FEKETE));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=KOSAR /\ AUTO[b]=FORD)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=KOSAR /\ ELETKOR[b]=HARMINCEGY));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=WHISKY /\ KEDVENCALLAT[b]=ROKA)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=WHISKY /\ AUTO[b]=VOLVO));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=IJASZAT /\ KEDVENCALLAT[b]=PILLANGO)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=IJASZAT /\ ELETKOR[b]=HUSZONKILENC));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCISKOLAITANTARGY[a]=OROSZ /\ KEDVENCETEL[b]=PALACSINTA)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCISKOLAITANTARGY[a]=OROSZ /\ KERESET[b]=K680K));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=BOR /\ KEDVENCGYUMOLCSZOLDSEG[b]=KIWI)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=BOR /\ KEDVENCETEL[b]=LECSO));
constraint forall(a,b in PEOPLE where a<b)(not(RUHAMARKA[a]=MUSTANG /\ KEDVENCSPORT[b]=LOVESZET)) /\ forall(a,b in PEOPLE where a<b)(not(RUHAMARKA[a]=MUSTANG /\ MUNKA[b]=MERNOK));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCALLAT[a]=KUTYA /\ KEDVENCETEL[b]=RANTOTTHUS)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCALLAT[a]=KUTYA /\ VAROS[b]=GYOR));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=KOKTEL /\ RUHAMARKA[b]=ADIDAS)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=KOKTEL /\ KEDVENCALLAT[b]=TIGRIS));
constraint forall(a,b in PEOPLE where a<b)(not(ELETKOR[a]=HARMINCOT /\ VAROS[b]=VESZPREM)) /\ forall(a,b in PEOPLE where a<b)(not(ELETKOR[a]=HARMINCOT /\ KEDVENCFOCICSAPAT[b]=UNITED));
constraint forall(a,b in PEOPLE where a<b)(not(MUNKA[a]=KATONA /\ KERESET[b]=K580K)) /\ forall(a,b in PEOPLE where a<b)(not(MUNKA[a]=KATONA /\ KEDVENCETEL[b]=HUSLEVES));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCGYUMOLCSZOLDSEG[a]=BROKKOLI /\ KEDVENCETEL[b]=SUTI)) /\ forall(a,b in PEOPLE where a<b)(not(KEDVENCGYUMOLCSZOLDSEG[a]=BROKKOLI /\ KEDVENCSPORT[b]=FALMASZAS));


constraint ELETKOR[6]=HUSZONKETTO;
constraint AUTO[12]=BMW;
constraint RUHAMARKA[9]=REEBOK;
constraint KEDVENCITAL[5]=VIZ;
constraint VAROS[2]=GYOR;
constraint KEDVENCISKOLAITANTARGY[8]=BIOSZ;
constraint KERESET[5]=K660K;
constraint NEV[14]=DALMA;
constraint AUTO[10]=TOYOTA;
constraint MUNKA[3]=TUZOLTO;
constraint KEDVENCALLAT[1]=OROSZLAN;
constraint KEDVENCFOCICSAPAT[13]=ROMA;
constraint KEDVENCFOCICSAPAT[1]=JUVENTUS;
constraint NEV[7]=PETRA;
constraint AUTO[6]=SKODA;
constraint RUHAMARKA[14]=MUSTANG;
constraint MUNKA[15]=PORTAS;
constraint RUHAMARKA[3]=CALVINKLEIN;
constraint MUNKA[12]=IGAZGATO;
constraint VAROS[7]=SZOLNOK;
constraint KEDVENCGYUMOLCSZOLDSEG[8]=RIBIZLI;
constraint NEV[1]=DANI;
constraint KEDVENCFOCICSAPAT[8]=CHELSEA;
constraint KEDVENCALLAT[7]=TEKNOS;
constraint KEDVENCETEL[8]=SULTKRUMPLI;
constraint ELETKOR[3]=HUSZONNYOLC;
constraint ELETKOR[11]=HARMINCOT;
constraint ELETKOR[8]=HUSZONKILENC;
constraint KEDVENCITAL[9]=KAKAO;
constraint KEDVENCGYUMOLCSZOLDSEG[11]=PAPRIKA;
constraint MUNKA[7]=UGYVED;
constraint KEDVENCISKOLAITANTARGY[14]=NEMET;
constraint VAROS[4]=BUDAPEST;
constraint KEDVENCALLAT[6]=RIGO;
constraint KEDVENCSPORT[8]=FUTSAL;
constraint KEDVENCISKOLAITANTARGY[13]=MATEK;
constraint KEDVENCITAL[9]=KAKAO;
constraint KEDVENCITAL[4]=BOR;
constraint KEDVENCGYUMOLCSZOLDSEG[6]=ALMA;
constraint VAROS[10]=PECS;
constraint KERESET[12]=K680K;
constraint ELETKOR[12]=HUSZONHAT;
constraint KEDVENCETEL[7]=HUSLEVES;
constraint KEDVENCFOCICSAPAT[6]=LYON;
constraint MUNKA[6]=ELADO;
constraint AUTO[8]=MERCEDES;
constraint VAROS[6]=VAC;
constraint KEDVENCALLAT[5]=KUTYA;
constraint MUNKA[2]=KOMUVES;
constraint KEDVENCITAL[2]=GYUMOLCSLE;
constraint KEDVENCSZIN[7]=PIROS;
constraint KEDVENCSZIN[12]=MAGENTA;
constraint KEDVENCFOCICSAPAT[4]=CITY;
constraint MUNKA[13]=KATONA;
constraint ELETKOR[2]=HUSZONEGY;
constraint VAROS[5]=MISKOLC;
constraint KEDVENCSPORT[14]=IJASZAT;
constraint KEDVENCSPORT[5]=GOKART;
constraint KEDVENCISKOLAITANTARGY[5]=FIZIKA;
constraint KEDVENCSZIN[10]=FEHER;
constraint ELETKOR[4]=HARMINC;
constraint KEDVENCETEL[8]=SULTKRUMPLI;
constraint ELETKOR[5]=HARMINCKETTO;


constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCFOCICSAPAT[a]=SPURS /\ AUTO[b]=BMW));
constraint forall(a,b in PEOPLE where a<b)(not(VAROS[a]=GYOR /\ KEDVENCITAL[b]=SOR));
constraint forall(a,b in PEOPLE where a<b)(not(RUHAMARKA[a]=FILA /\ NEV[b]=PETRA));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=ROGBI /\ KEDVENCSZIN[b]=SARGA));
constraint forall(a,b in PEOPLE where a<b)(not(RUHAMARKA[a]=NIKE /\ KERESET[b]=K660K));
constraint forall(a,b in PEOPLE where a<b)(not(AUTO[a]=SKODA /\ KEDVENCSZIN[b]=NARANCSSARGA));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSZIN[a]=KEK /\ NEV[b]=PETI));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCFOCICSAPAT[a]=LIVERPOOL /\ KEDVENCETEL[b]=LECSO));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCISKOLAITANTARGY[a]=TESI /\ AUTO[b]=RENAULT));
constraint forall(a,b in PEOPLE where a<b)(not(ELETKOR[a]=HARMINCEGY /\ KEDVENCITAL[b]=KOKTEL));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=USZAS /\ RUHAMARKA[b]=EVERLAST));
constraint forall(a,b in PEOPLE where a<b)(not(ELETKOR[a]=HUSZONKETTO /\ KEDVENCALLAT[b]=LO));
constraint forall(a,b in PEOPLE where a<b)(not(MUNKA[a]=TECHNIKUS /\ KEDVENCISKOLAITANTARGY[b]=MATEK));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSZIN[a]=LILA /\ KEDVENCFOCICSAPAT[b]=CITY));
constraint forall(a,b in PEOPLE where a<b)(not(RUHAMARKA[a]=NIKE /\ AUTO[b]=SUZUKI));
constraint forall(a,b in PEOPLE where a<b)(not(MUNKA[a]=BIRO /\ KEDVENCSPORT[b]=FUTSAL));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCGYUMOLCSZOLDSEG[a]=NARANCS /\ VAROS[b]=SZOLNOK));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCSPORT[a]=ROGBI /\ KERESET[b]=K460K));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCALLAT[a]=TENGERIMALAC /\ KEDVENCSZIN[b]=SZURKE));
constraint forall(a,b in PEOPLE where a<b)(not(AUTO[a]=PEUGEOT /\ KEDVENCFOCICSAPAT[b]=BARCELONA));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCITAL[a]=TEA /\ RUHAMARKA[b]=VANS));
constraint forall(a,b in PEOPLE where a<b)(not(KEDVENCALLAT[a]=KUTYA /\ KEDVENCSPORT[b]=FOCI));


constraint forall(p in 1..db-1)(NEV[p]=DALMA <-> ELETKOR[p+1]=HUSZONHAROM) /\ (NEV[db]!=DALMA) /\ (ELETKOR[1]!=HUSZONHAROM);
constraint forall(p in 1..db-1)(RUHAMARKA[p]=REEBOK <-> RUHAMARKA[p+1]=VANS) /\ (RUHAMARKA[db]!=REEBOK) /\ (RUHAMARKA[1]!=VANS);
constraint forall(p in 1..db-1)(KEDVENCGYUMOLCSZOLDSEG[p]=BARACK <-> KEDVENCISKOLAITANTARGY[p+1]=BIOSZ) /\ (KEDVENCGYUMOLCSZOLDSEG[db]!=BARACK) /\ (KEDVENCISKOLAITANTARGY[1]!=BIOSZ);
constraint forall(p in 2..db)(KERESET[p]=K660K <-> NEV[p-1]=ANDRAS) /\ (NEV[db]!=ANDRAS) /\ (KERESET[1]!=K660K);
constraint forall(p in 1..db-1)(KEDVENCSPORT[p]=FUTAS <-> KEDVENCALLAT[p+1]=SZAMAR) /\ (KEDVENCSPORT[db]!=FUTAS) /\ (KEDVENCALLAT[1]!=SZAMAR);
constraint forall(p in 2..db)(NEV[p]=ANDRAS <-> KEDVENCSZIN[p-1]=BARNA) /\ (KEDVENCSZIN[db]!=BARNA) /\ (NEV[1]!=ANDRAS);
constraint forall(p in 2..db)(ELETKOR[p]=HUSZONKETTO <-> NEV[p-1]=MARK) /\ (NEV[db]!=MARK) /\ (ELETKOR[1]!=HUSZONKETTO);
constraint forall(p in 1..db-1)(KEDVENCSZIN[p]=FEKETE <-> MUNKA[p+1]=IRO) /\ (KEDVENCSZIN[db]!=FEKETE) /\ (MUNKA[1]!=IRO);
constraint forall(p in 2..db)(NEV[p]=PETRA <-> KEDVENCETEL[p-1]=KENYER) /\ (KEDVENCETEL[db]!=KENYER) /\ (NEV[1]!=PETRA);
constraint forall(p in 2..db)(KERESET[p]=K660K <-> KEDVENCSPORT[p-1]=ROGBI) /\ (KEDVENCSPORT[db]!=ROGBI) /\ (KERESET[1]!=K660K);
constraint forall(p in 1..db-1)(VAROS[p]=GYOR <-> AUTO[p+1]=FERRARI) /\ (VAROS[db]!=GYOR) /\ (AUTO[1]!=FERRARI);
constraint forall(p in 2..db)(KEDVENCALLAT[p]=TIGRIS <-> KEDVENCSPORT[p-1]=JUDO) /\ (KEDVENCSPORT[db]!=JUDO) /\ (KEDVENCALLAT[1]!=TIGRIS);
constraint forall(p in 2..db)(VAROS[p]=SZEGED <-> NEV[p-1]=GIZI) /\ (NEV[db]!=GIZI) /\ (VAROS[1]!=SZEGED);
constraint forall(p in 1..db-1)(NEV[p]=PETRA <-> NEV[p+1]=ZOLI) /\ (NEV[db]!=PETRA) /\ (NEV[1]!=ZOLI);
constraint forall(p in 1..db-1)(RUHAMARKA[p]=VANS <-> RUHAMARKA[p+1]=GUCCI) /\ (RUHAMARKA[db]!=VANS) /\ (RUHAMARKA[1]!=GUCCI);
constraint forall(p in 2..db)(VAROS[p]=SZEGED <-> RUHAMARKA[p-1]=EVERLAST) /\ (RUHAMARKA[db]!=EVERLAST) /\ (VAROS[1]!=SZEGED);
constraint forall(p in 2..db)(NEV[p]=ANDRAS <-> KEDVENCFOCICSAPAT[p-1]=LIVERPOOL) /\ (KEDVENCFOCICSAPAT[db]!=LIVERPOOL) /\ (NEV[1]!=ANDRAS);
constraint forall(p in 1..db-1)(KEDVENCISKOLAITANTARGY[p]=OLASZ <-> KEDVENCSZIN[p+1]=SZURKE) /\ (KEDVENCISKOLAITANTARGY[db]!=OLASZ) /\ (KEDVENCSZIN[1]!=SZURKE);
constraint forall(p in 2..db)(KEDVENCGYUMOLCSZOLDSEG[p]=BARACK <-> KERESET[p-1]=K500K) /\ (KERESET[db]!=K500K) /\ (KEDVENCGYUMOLCSZOLDSEG[1]!=BARACK);
constraint forall(p in 1..db-1)(KEDVENCISKOLAITANTARGY[p]=TESI <-> KEDVENCGYUMOLCSZOLDSEG[p+1]=BANAN) /\ (KEDVENCISKOLAITANTARGY[db]!=TESI) /\ (KEDVENCGYUMOLCSZOLDSEG[1]!=BANAN);
constraint forall(p in 1..db-1)(RUHAMARKA[p]=MUSTANG <-> VAROS[p+1]=SZOMBATHELY) /\ (RUHAMARKA[db]!=MUSTANG) /\ (VAROS[1]!=SZOMBATHELY);
constraint forall(p in 2..db)(MUNKA[p]=PORTAS <-> KERESET[p-1]=K600K) /\ (KERESET[db]!=K600K) /\ (MUNKA[1]!=PORTAS);
constraint forall(p in 1..db-1)(KEDVENCSZIN[p]=OKKER <-> VAROS[p+1]=ESZTERGOM) /\ (KEDVENCSZIN[db]!=OKKER) /\ (VAROS[1]!=ESZTERGOM);
constraint forall(p in 2..db)(KEDVENCALLAT[p]=TIGRIS <-> AUTO[p-1]=AUDI) /\ (AUTO[db]!=AUDI) /\ (KEDVENCALLAT[1]!=TIGRIS);
constraint forall(p in 1..db-1)(RUHAMARKA[p]=REEBOK <-> KEDVENCSZIN[p+1]=FEHER) /\ (RUHAMARKA[db]!=REEBOK) /\ (KEDVENCSZIN[1]!=FEHER);
constraint forall(p in 2..db)(NEV[p]=DALMA <-> KEDVENCALLAT[p-1]=FARKAS) /\ (KEDVENCALLAT[db]!=FARKAS) /\ (NEV[1]!=DALMA);
constraint forall(p in 2..db)(NEV[p]=GIZI <-> VAROS[p-1]=DEBRECEN) /\ (VAROS[db]!=DEBRECEN) /\ (NEV[1]!=GIZI);
constraint forall(p in 2..db)(KEDVENCALLAT[p]=TIGRIS <-> KEDVENCSZIN[p-1]=ZOLD) /\ (KEDVENCSZIN[db]!=ZOLD) /\ (KEDVENCALLAT[1]!=TIGRIS);
constraint forall(p in 1..db-1)(KEDVENCSZIN[p]=OKKER <-> KEDVENCFOCICSAPAT[p+1]=NAPOLI) /\ (KEDVENCSZIN[db]!=OKKER) /\ (KEDVENCFOCICSAPAT[1]!=NAPOLI);
constraint forall(p in 1..db-1)(RUHAMARKA[p]=MUSTANG <-> KEDVENCETEL[p+1]=RAKOTTKRUMPLI) /\ (RUHAMARKA[db]!=MUSTANG) /\ (KEDVENCETEL[1]!=RAKOTTKRUMPLI);
constraint forall(p in 2..db)(KEDVENCFOCICSAPAT[p]=BAYERN <-> VAROS[p-1]=MOR) /\ (VAROS[db]!=MOR) /\ (KEDVENCFOCICSAPAT[1]!=BAYERN);
constraint forall(p in 1..db-1)(KERESET[p]=K500K <-> RUHAMARKA[p+1]=OMBRE) /\ (KERESET[db]!=K500K) /\ (RUHAMARKA[1]!=OMBRE);
constraint forall(p in 2..db)(NEV[p]=MARK <-> KEDVENCSZIN[p-1]=KEK) /\ (KEDVENCSZIN[db]!=KEK) /\ (NEV[1]!=MARK);
constraint forall(p in 2..db)(KEDVENCALLAT[p]=SZAMAR <-> KEDVENCGYUMOLCSZOLDSEG[p-1]=DIO) /\ (KEDVENCGYUMOLCSZOLDSEG[db]!=DIO) /\ (KEDVENCALLAT[1]!=SZAMAR);
constraint forall(p in 1..db-1)(KEDVENCSZIN[p]=FEKETE <-> ELETKOR[p+1]=HUSZONHET) /\ (KEDVENCSZIN[db]!=FEKETE) /\ (ELETKOR[1]!=HUSZONHET);
constraint forall(p in 2..db)(NEV[p]=JOZSI <-> KEDVENCGYUMOLCSZOLDSEG[p-1]=KAPOSZTA) /\ (KEDVENCGYUMOLCSZOLDSEG[db]!=KAPOSZTA) /\ (NEV[1]!=JOZSI);
constraint forall(p in 2..db)(KEDVENCSZIN[p]=SARGA <-> KEDVENCETEL[p-1]=PIZZA) /\ (KEDVENCETEL[db]!=PIZZA) /\ (KEDVENCSZIN[1]!=SARGA);
constraint forall(p in 1..db-1)(AUTO[p]=MAZDA <-> KEDVENCSZIN[p+1]=ARANY) /\ (AUTO[db]!=MAZDA) /\ (KEDVENCSZIN[1]!=ARANY);
constraint forall(p in 2..db)(KEDVENCSZIN[p]=SZURKE <-> KEDVENCSPORT[p-1]=KARATE) /\ (KEDVENCSPORT[db]!=KARATE) /\ (KEDVENCSZIN[1]!=SZURKE);
constraint forall(p in 2..db)(KEDVENCETEL[p]=KENYER <-> MUNKA[p-1]=RENDOR) /\ (MUNKA[db]!=RENDOR) /\ (KEDVENCETEL[1]!=KENYER);
constraint forall(p in 1..db-1)(KEDVENCFOCICSAPAT[p]=CHELSEA <-> KEDVENCGYUMOLCSZOLDSEG[p+1]=SZOLO) /\ (KEDVENCFOCICSAPAT[db]!=CHELSEA) /\ (KEDVENCGYUMOLCSZOLDSEG[1]!=SZOLO);
constraint forall(p in 2..db)(RUHAMARKA[p]=MUSTANG <-> KEDVENCETEL[p-1]=FOZELEK) /\ (KEDVENCETEL[db]!=FOZELEK) /\ (RUHAMARKA[1]!=MUSTANG);
constraint forall(p in 1..db-1)(KEDVENCALLAT[p]=FARKAS <-> KEDVENCFOCICSAPAT[p+1]=PSG) /\ (KEDVENCALLAT[db]!=FARKAS) /\ (KEDVENCFOCICSAPAT[1]!=PSG);
constraint forall(p in 2..db)(VAROS[p]=BUDAPEST <-> KERESET[p-1]=K540K) /\ (KERESET[db]!=K540K) /\ (VAROS[1]!=BUDAPEST);
constraint forall(p in 1..db-1)(KEDVENCETEL[p]=PIZZA <-> RUHAMARKA[p+1]=ARMANI) /\ (KEDVENCETEL[db]!=PIZZA) /\ (RUHAMARKA[1]!=ARMANI);
constraint forall(p in 2..db)(KERESET[p]=K500K <-> RUHAMARKA[p-1]=LACOSTE) /\ (RUHAMARKA[db]!=LACOSTE) /\ (KERESET[1]!=K500K);
constraint forall(p in 2..db)(KEDVENCETEL[p]=KENYER <-> KEDVENCGYUMOLCSZOLDSEG[p-1]=DINNYE) /\ (KEDVENCGYUMOLCSZOLDSEG[db]!=DINNYE) /\ (KEDVENCETEL[1]!=KENYER);
constraint forall(p in 1..db-1)(KEDVENCGYUMOLCSZOLDSEG[p]=KIWI <-> KERESET[p+1]=K700K) /\ (KEDVENCGYUMOLCSZOLDSEG[db]!=KIWI) /\ (KERESET[1]!=K700K);
constraint forall(p in 2..db)(VAROS[p]=SZOLNOK <-> KEDVENCITAL[p-1]=KOKTEL) /\ (KEDVENCITAL[db]!=KOKTEL) /\ (VAROS[1]!=SZOLNOK);
constraint forall(p in 2..db)(KEDVENCITAL[p]=WHISKY <-> MUNKA[p-1]=MERNOK) /\ (MUNKA[db]!=MERNOK) /\ (KEDVENCITAL[1]!=WHISKY);
constraint forall(p in 1..db-1)(MUNKA[p]=TUZOLTO <-> KEDVENCISKOLAITANTARGY[p+1]=SPANYOL) /\ (MUNKA[db]!=TUZOLTO) /\ (KEDVENCISKOLAITANTARGY[1]!=SPANYOL);
constraint forall(p in 2..db)(NEV[p]=ANDRAS <-> KEDVENCITAL[p-1]=KOLA) /\ (KEDVENCITAL[db]!=KOLA) /\ (NEV[1]!=ANDRAS);
constraint forall(p in 2..db)(RUHAMARKA[p]=GUCCI <-> KEDVENCITAL[p-1]=PALINKA) /\ (KEDVENCITAL[db]!=PALINKA) /\ (RUHAMARKA[1]!=GUCCI);
constraint forall(p in 2..db)(KEDVENCITAL[p]=GIN <-> KEDVENCISKOLAITANTARGY[p-1]=IRODALOM) /\ (KEDVENCISKOLAITANTARGY[db]!=IRODALOM) /\ (KEDVENCITAL[1]!=GIN);
constraint forall(p in 2..db)(KEDVENCSZIN[p]=FEKETE <-> ELETKOR[p-1]=HARMINCHAROM) /\ (ELETKOR[db]!=HARMINCHAROM) /\ (KEDVENCSZIN[1]!=FEKETE);
constraint forall(p in 2..db)(KEDVENCISKOLAITANTARGY[p]=IRODALOM <-> KEDVENCSZIN[p-1]=LILA) /\ (KEDVENCSZIN[db]!=LILA) /\ (KEDVENCISKOLAITANTARGY[1]!=IRODALOM);
constraint forall(p in 1..db-1)(KEDVENCALLAT[p]=TEKNOS <-> ELETKOR[p+1]=HUSZONKILENC) /\ (KEDVENCALLAT[db]!=TEKNOS) /\ (ELETKOR[1]!=HUSZONKILENC);
constraint forall(p in 2..db)(KEDVENCETEL[p]=LEKVAR <-> KEDVENCETEL[p-1]=SUTI) /\ (KEDVENCETEL[db]!=SUTI) /\ (KEDVENCETEL[1]!=LEKVAR);


solve satisfy;

int: width = -15;
output [format(width,show(NEV[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(ELETKOR[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCSZIN[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(AUTO[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCALLAT[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCFOCICSAPAT[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCSPORT[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(VAROS[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KERESET[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(RUHAMARKA[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCETEL[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCITAL[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCGYUMOLCSZOLDSEG[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(KEDVENCISKOLAITANTARGY[p])) ++ "\t" | p in PEOPLE]++["\n"];
output [format(width,show(MUNKA[p])) ++ "\t" | p in PEOPLE]++["\n"];
